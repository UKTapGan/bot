const { Pool } = require('pg');
const express = require('express');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

// Більш надійна конфігурація для Neon/Vercel
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

const db = {
  query: (text, params) => pool.query(text, params),
};

// --- API-ендпоінти з виправленими шляхами ---

app.get('/api/users', async (req, res) => {
  try {
    const { rows } = await db.query('SELECT * FROM users ORDER BY name');
    res.json(rows);
  } catch (err) {
    console.error('Server error on GET /api/users:', err.message);
    res.status(500).send('Помилка сервера');
  }
});

app.post('/api/login', async (req, res) => {
  const { id, name } = req.body;
  if (!id) {
    return res.status(400).json({ message: "ID користувача є обов'язковим" });
  }
  try {
    const userResult = await db.query('SELECT * FROM users WHERE id = $1', [id]);
    if (userResult.rows.length > 0) {
      let user = userResult.rows[0];
      if (name && user.name !== name) {
        const updateResult = await db.query('UPDATE users SET name = $1 WHERE id = $2 RETURNING *', [name, id]);
        user = updateResult.rows[0];
      }
      res.json(user);
    } else {
      res.status(403).json({ message: 'Доступ заборонено. Користувача не знайдено' });
    }
  } catch (err) {
    console.error('Server error on POST /api/login:', err.message);
    res.status(500).send('Помилка сервера');
  }
});

app.post('/api/users', async (req, res) => {
  const { id, role, name } = req.body;
  try {
    const { rows } = await db.query('INSERT INTO users (id, role, name) VALUES ($1, $2, $3) RETURNING *', [id, role, name || '']);
    res.status(201).json(rows[0]);
  } catch (err) {
    console.error('Server error on POST /api/users:', err.message);
    res.status(500).send('Помилка сервера: Можливо, користувач з таким ID вже існує.');
  }
});

app.delete('/api/users/:id', async (req, res) => {
  const { id } = req.params;
  try {
    await db.query('DELETE FROM users WHERE id = $1', [id]);
    res.status(204).send();
  } catch (err) {
    console.error('Server error on DELETE /api/users/:id:', err.message);
    res.status(500).send('Помилка сервера');
  }
});

// Експортуємо додаток для Vercel
module.exports = app;